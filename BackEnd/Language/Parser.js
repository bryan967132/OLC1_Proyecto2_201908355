/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,14],$V9=[1,15],$Va=[5,15,17,23,30,35,38,43,45,66,67,68,69,70],$Vb=[1,25],$Vc=[17,20,25,34],$Vd=[2,14],$Ve=[1,30],$Vf=[9,16],$Vg=[1,43],$Vh=[1,41],$Vi=[1,40],$Vj=[1,42],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,64],$Vr=[1,65],$Vs=[1,58],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[9,16,21,24,25,30,34,44,46,47,48,49,50,51,52,53,54,55,57,58,59],$VG=[9,16,21,24,25,30,34,44,46,47,48,49,50,51,52,53,54,55,58,59],$VH=[9,16,21,30,34,44,54,55,58,59],$VI=[1,107],$VJ=[9,16,21,24,25,30,34,44,46,47,50,51,52,53,54,55,58,59],$VK=[9,16,21,24,25,30,34,44,50,51,52,53,54,55,58,59],$VL=[1,128],$VM=[1,127],$VN=[9,16,21,30,34,44],$VO=[5,15,17,23,30,35,37,38,43,45,66,67,68,69,70],$VP=[30,43,45],$VQ=[16,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"TYPE":7,"LIST_ID":8,"TOK_semicolon":9,"ID":10,"NEW_ARRAY":11,"ARRAY_ASIGN":12,"IF_STRCT":13,"SWITCH_STRCT":14,"RW_break":15,"TOK_comma":16,"TOK_id":17,"TOK_equal":18,"EXP":19,"TOK_lbrckt":20,"TOK_rbrckt":21,"ARRAY_VALUE":22,"RW_list":23,"TOK_less":24,"TOK_great":25,"LIST_VALUE":26,"RW_new":27,"TOK_lbrc":28,"VALUE_LIST":29,"TOK_rbrc":30,"TOK_dot":31,"RW_add":32,"TOK_lpar":33,"TOK_rpar":34,"RW_if":35,"BLOCK":36,"RW_else":37,"RW_switch":38,"CASE_BLOCK":39,"CASE_LIST":40,"DEFAULT":41,"CASE":42,"RW_case":43,"TOK_colon":44,"RW_default":45,"TOK_plus":46,"TOK_minus":47,"TOK_mult":48,"TOK_div":49,"TOK_equalequal":50,"TOK_notequal":51,"TOK_lessequal":52,"TOK_greatequal":53,"TOK_or":54,"TOK_and":55,"TOK_not":56,"TOK_question":57,"TOK_incr":58,"TOK_decr":59,"TOK_double":60,"TOK_integer":61,"TOK_string":62,"TOK_char":63,"RW_true":64,"RW_false":65,"RW_int":66,"RW_double":67,"RW_boolean":68,"RW_char":69,"RW_string":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"TOK_semicolon",15:"RW_break",16:"TOK_comma",17:"TOK_id",18:"TOK_equal",20:"TOK_lbrckt",21:"TOK_rbrckt",23:"RW_list",24:"TOK_less",25:"TOK_great",27:"RW_new",28:"TOK_lbrc",30:"TOK_rbrc",31:"TOK_dot",32:"RW_add",33:"TOK_lpar",34:"TOK_rpar",35:"RW_if",37:"RW_else",38:"RW_switch",43:"RW_case",44:"TOK_colon",45:"RW_default",46:"TOK_plus",47:"TOK_minus",48:"TOK_mult",49:"TOK_div",50:"TOK_equalequal",51:"TOK_notequal",52:"TOK_lessequal",53:"TOK_greatequal",54:"TOK_or",55:"TOK_and",56:"TOK_not",57:"TOK_question",58:"TOK_incr",59:"TOK_decr",60:"TOK_double",61:"TOK_integer",62:"TOK_string",63:"TOK_char",64:"RW_true",65:"RW_false",66:"RW_int",67:"RW_double",68:"RW_boolean",69:"RW_char",70:"RW_string"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[8,3],[8,1],[10,3],[10,1],[11,6],[11,7],[22,5],[22,3],[26,5],[12,6],[12,6],[12,8],[29,3],[29,1],[13,5],[13,7],[13,7],[36,3],[36,2],[14,7],[39,2],[39,1],[39,1],[40,2],[40,1],[42,4],[41,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,4],[19,5],[19,4],[19,6],[19,2],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{1:[3]},{5:[1,20],6:21,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},o($Va,[2,3]),{8:22,10:24,17:$Vb,20:[1,23]},{9:[1,26]},{9:[1,27]},{9:[1,28]},o($Va,[2,8]),o($Va,[2,9]),{9:[1,29]},o($Vc,[2,66]),o($Vc,[2,67]),o($Vc,[2,68]),o($Vc,[2,69]),o($Vc,[2,70]),{9:$Vd,18:$Ve,20:[1,31],31:[1,32]},{24:[1,33]},{33:[1,34]},{33:[1,35]},{1:[2,1]},o($Va,[2,2]),{9:[1,36],16:[1,37]},{21:[1,38]},o($Vf,[2,12]),o($Vf,$Vd,{18:$Ve}),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,10]),{17:$Vg,19:39,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:50,20:[1,51],33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{32:[1,52]},{7:53,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{17:$Vg,19:54,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:55,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},o($Va,[2,4]),{10:56,17:$Vb},{17:[1,57]},o($Vf,[2,13],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE}),{17:$Vg,19:73,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{7:75,17:$Vg,19:74,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{17:$Vg,19:76,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},o($VF,[2,59],{20:[1,77]}),o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),{21:[1,78],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{17:$Vg,19:79,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{33:[1,80]},{25:[1,81]},{24:$Vq,25:$Vr,34:[1,82],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{24:$Vq,25:$Vr,34:[1,83],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},o($Vf,[2,11]),{18:[1,84]},{17:$Vg,19:85,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:86,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:87,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:88,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:89,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:90,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:91,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:92,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:93,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:94,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:95,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:96,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:97,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},o($VF,[2,57]),o($VF,[2,58]),o($VG,[2,42],{57:$VC}),{24:$Vq,25:$Vr,34:[1,98],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{34:[1,99]},o($VH,[2,52],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,57:$VC}),{17:$Vg,19:100,20:[1,101],33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{18:[1,102]},{21:[1,103],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{17:$Vg,19:104,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:[1,105]},{28:$VI,36:106},{28:[1,108]},{22:109,27:[1,110],28:[1,111]},o($VJ,[2,38],{48:$Vu,49:$Vv,57:$VC}),o($VJ,[2,39],{48:$Vu,49:$Vv,57:$VC}),o($VG,[2,40],{57:$VC}),o($VG,[2,41],{57:$VC}),o($VK,[2,44],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o($VK,[2,45],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o($VK,[2,46],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o($VK,[2,47],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o($VK,[2,48],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o($VK,[2,49],{46:$Vs,47:$Vt,48:$Vu,49:$Vv,57:$VC}),o([9,16,21,30,34,44,54,58,59],[2,50],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,55:$VB,57:$VC}),o($VH,[2,51],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,57:$VC}),{24:$Vq,25:$Vr,44:[1,112],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},o($VF,[2,43]),{17:$Vg,19:113,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{21:[1,114],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{17:$Vg,19:115,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:116,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{21:[1,117]},{24:$Vq,25:$Vr,34:[1,118],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{18:[1,119]},o($Va,[2,25],{37:[1,120]}),{4:121,6:3,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,30:[1,122],35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{39:123,40:124,41:125,42:126,43:$VL,45:$VM},{9:[2,15]},{7:129,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{17:$Vg,19:131,29:130,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{17:$Vg,19:132,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},o($VN,[2,53],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE}),o($VF,[2,55]),{21:[1,133],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{9:[2,20],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{18:[1,134]},{9:[2,21]},{26:135,27:[1,136]},{13:138,28:$VI,35:$V3,36:137},{6:21,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,30:[1,139],35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},o($VO,[2,29]),{30:[1,140]},{30:[2,32],41:141,42:142,43:$VL,45:$VM},{30:[2,33]},o($VP,[2,35]),{44:[1,143]},{17:$Vg,19:144,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{20:[1,145]},{16:[1,147],30:[1,146]},o($VQ,[2,24],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE}),o($VN,[2,54],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE}),{21:[1,148]},{17:$Vg,19:149,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{9:[2,16]},{23:[1,150]},o($Va,[2,26]),o($Va,[2,27]),o($VO,[2,28]),o($Va,[2,30]),{30:[2,31]},o($VP,[2,34]),{4:151,6:3,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{24:$Vq,25:$Vr,44:[1,152],46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{17:$Vg,19:153,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},{9:[2,18]},{17:$Vg,19:154,33:$Vh,47:$Vi,56:$Vj,60:$Vk,61:$Vl,62:$Vm,63:$Vn,64:$Vo,65:$Vp},o($VF,[2,56]),{9:[2,22],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},{24:[1,155]},{6:21,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,30:[2,37],35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{4:156,6:3,7:4,10:5,11:6,12:7,13:8,14:9,15:$V0,17:$V1,23:$V2,35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},{21:[1,157],24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE},o($VQ,[2,23],{24:$Vq,25:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,57:$VC,58:$VD,59:$VE}),{7:158,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9},o($VP,[2,36],{7:4,10:5,11:6,12:7,13:8,14:9,6:21,15:$V0,17:$V1,23:$V2,35:$V3,38:$V4,66:$V5,67:$V6,68:$V7,69:$V8,70:$V9}),{9:[2,17]},{25:[1,159]},{9:[2,19]}],
defaultActions: {20:[2,1],109:[2,15],118:[2,21],125:[2,33],135:[2,16],141:[2,31],146:[2,18],157:[2,17],159:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 66
break;
case 5:return 67
break;
case 6:return 68
break;
case 7:return 69
break;
case 8:return 70
break;
case 9:return 64
break;
case 10:return 65
break;
case 11:return 27
break;
case 12:return 23
break;
case 13:return 32
break;
case 14:return 35
break;
case 15:return 37
break;
case 16:return 38
break;
case 17:return 43
break;
case 18:return 15
break;
case 19:return 45
break;
case 20:return 'RW_print'
break;
case 21:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2);return 62; 
break;
case 22:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng - 2);return 63; 
break;
case 23:return 17
break;
case 24:return 60
break;
case 25:return 61
break;
case 26:return 58
break;
case 27:return 59
break;
case 28:return 46
break;
case 29:return 47
break;
case 30:return 48
break;
case 31:return 49
break;
case 32:return 'TOK_mod'
break;
case 33:return 'TOK_pow'
break;
case 34:return 33
break;
case 35:return 34
break;
case 36:return 20
break;
case 37:return 21
break;
case 38:return 28
break;
case 39:return 30
break;
case 40:return 50
break;
case 41:return 18
break;
case 42:return 31
break;
case 43:return 16
break;
case 44:return 44
break;
case 45:return 9
break;
case 46:return 54
break;
case 47:return 55
break;
case 48:return 51
break;
case 49:return 56
break;
case 50:return 52
break;
case 51:return 53
break;
case 52:return 24
break;
case 53:return 25
break;
case 54:return 57
break;
case 55:console.log('Error: ' + yy_.yytext)
break;
case 56:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \n\r])/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:"(([^\n\"\\]?|\\.))*")/i,/^(?:'(([^\n\"\\]?|\\.))')/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:=)/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}